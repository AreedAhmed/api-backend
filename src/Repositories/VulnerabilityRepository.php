<?php

declare(strict_types=1);

namespace Reconmap\Repositories;

use Reconmap\Repositories\QueryBuilders\SelectQueryBuilder;

class VulnerabilityRepository extends MysqlRepository
{

    private $db;

    public function __construct(\mysqli $db)
    {
        $this->db = $db;
    }

    public function findById(int $id): array
    {
        $stmt = $this->db->prepare('SELECT * FROM vulnerability WHERE id = ?');
        $stmt->bind_param('i', $id);
        $stmt->execute();
        $rs = $stmt->get_result();
        $project = $rs->fetch_assoc();
        $stmt->close();

        return $project;
    }

    public function findCountByRisk(): array
    {
        $sql = <<<SQL
        SELECT risk, COUNT(*) AS total
        FROM vulnerability
        GROUP BY risk ORDER BY total DESC;
        SQL;

        $rs = $this->db->query($sql);
        $rows = $rs->fetch_all(MYSQLI_ASSOC);
        foreach ($rows as &$row) {
            $row['total'] = intval($row['total']);
        }
        return $rows;
    }

    public function findAll(int $page = 0): array
    {
        $queryBuilder = $this->getBaseSelectQueryBuilder();
        $queryBuilder->setLimit('?, ?');
        $sql = $queryBuilder->toSql();

        $limitPerPage = 20;
        $limitOffset = $page * $limitPerPage;

        $stmt = $this->db->prepare($sql);
        $stmt->bind_param('ii', $limitOffset, $limitPerPage);
        $stmt->execute();
        $rs = $stmt->get_result();
        $rows = $rs->fetch_all(MYSQLI_ASSOC);
        return $rows;
    }

    public function findByKeywords(string $keywords, int $page = 0): array
    {
        $queryBuilder = $this->getBaseSelectQueryBuilder();
        $queryBuilder->setWhere('summary LIKE ? OR description LIKE ?');
        $queryBuilder->setLimit('?, ?');
        $sql = $queryBuilder->toSql();

        $limitPerPage = 20;
        $limitOffset = $page * $limitPerPage;

        $keywordsLike = "%$keywords%";

        $stmt = $this->db->prepare($sql);
        $stmt->bind_param('ssii', $keywordsLike, $keywordsLike, $limitOffset, $limitPerPage);
        $stmt->execute();
        $rs = $stmt->get_result();
        $rows = $rs->fetch_all(MYSQLI_ASSOC);
        return $rows;
    }

    public function countAll(): int
    {
        $sql = <<<SQL
        SELECT COUNT(*) AS total
        FROM vulnerability
        SQL;

        $stmt = $this->db->prepare($sql);
        $stmt->execute();
        $rs = $stmt->get_result();
        $row = $rs->fetch_assoc();
        return (int)$row['total'];
    }

    public function insert(int $projectId, ?int $targetId, int $userId, string $summary, string $description, string $risk): int
    {
        $stmt = $this->db->prepare('INSERT INTO vulnerability (project_id, target_id, reported_by_uid, summary, description, risk) VALUES (?, ?, ?, ?, ?, ?)');
        $stmt->bind_param('iiisss', $projectId, $targetId, $userId, $summary, $description, $risk);
        return $this->executeInsertStatement($stmt);
    }

    public function findByProjectId(int $projectId): array
    {
        $stmt = $this->db->prepare('SELECT * FROM vulnerability WHERE project_id = ?');
        $stmt->bind_param('i', $projectId);
        $stmt->execute();
        $rs = $stmt->get_result();
        $tasks = $rs->fetch_all(MYSQLI_ASSOC);
        $stmt->close();

        return $tasks;
    }

    public function deleteById(int $id): bool
    {
        $stmt = $this->db->prepare('DELETE FROM vulnerability WHERE id = ?');
        $stmt->bind_param('i', $id);
        $result = $stmt->execute();
        $success = $result && 1 === $stmt->affected_rows;
        $stmt->close();

        return $success;
    }

    public function updateById(int $id, string $column, string $value): bool
    {
        $stmt = $this->db->prepare('UPDATE vulnerability SET ' . $column . ' = ? WHERE id = ?');
        $stmt->bind_param('si', $value, $id);
        $result = $stmt->execute();
        $success = $result && 1 === $stmt->affected_rows;
        $stmt->close();

        return $success;
    }

    private function getBaseSelectQueryBuilder(): SelectQueryBuilder
    {
        $queryBuilder = new SelectQueryBuilder('vulnerability');
        $queryBuilder->setColumns('id, insert_ts, summary, description, risk, cvss_score, status');
        $queryBuilder->setOrderBy('insert_ts DESC');
        return $queryBuilder;
    }
}
