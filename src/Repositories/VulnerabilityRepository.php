<?php

declare(strict_types=1);

namespace Reconmap\Repositories;

class VulnerabilityRepository
{

    private $db;

    public function __construct(\mysqli $db)
    {
        $this->db = $db;
    }

    public function findById(int $id): array
    {
        $stmt = $this->db->prepare('SELECT * FROM vulnerability WHERE id = ?');
        $stmt->bind_param('i', $id);
        $stmt->execute();
        $rs = $stmt->get_result();
        $project = $rs->fetch_assoc();
        $stmt->close();

        return $project;
    }

    public function findCountByRisk(): array
    {
        $sql = <<<SQL
        SELECT risk, COUNT(*) AS total
        FROM vulnerability
        GROUP BY risk ORDER BY total DESC;
        SQL;

        $rs = $this->db->query($sql);
        $rows = $rs->fetch_all(MYSQLI_ASSOC);
        foreach($rows as &$row) {
            $row['total'] = intval($row['total']);
        }
        return $rows;
    }

    public function findAll(): array
    {
        $rs = $this->db->query('SELECT id, insert_ts, summary, description, risk, cvss_score FROM vulnerability ORDER BY insert_ts DESC LIMIT 20');
        $rows = $rs->fetch_all(MYSQLI_ASSOC);
        return $rows;
    }

    public function insert(int $projectId, ?int $targetId, int $userId, string $summary, string $description, string $risk): bool
    {
        $stmt = $this->db->prepare('INSERT INTO vulnerability (project_id, target_id, reported_by_uid, summary, description, risk) VALUES (?, ?, ?, ?, ?, ?)');
        $stmt->bind_param('iiisss', $projectId, $targetId, $userId, $summary, $description, $risk);
        $result = $stmt->execute();
        $success = $result && 1 === $stmt->affected_rows;
        $stmt->close();

        return $success;
    }

    public function findByProjectId(int $projectId): array
    {
        $stmt = $this->db->prepare('SELECT * FROM vulnerability WHERE project_id = ?');
        $stmt->bind_param('i', $projectId);
        $stmt->execute();
        $rs = $stmt->get_result();
        $tasks = $rs->fetch_all(MYSQLI_ASSOC);
        $stmt->close();

        return $tasks;
    }

    public function deleteById(int $id): bool
    {
        $stmt = $this->db->prepare('DELETE FROM vulnerability WHERE id = ?');
        $stmt->bind_param('i', $id);
        $result = $stmt->execute();
        $success = $result && 1 === $stmt->affected_rows;
        $stmt->close();

        return $success;
    }
}
