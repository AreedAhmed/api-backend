<?xml version="1.0" encoding="utf-8"?>
<reconmap>
    <projects>
        <project template="true">
            <name>Bounty Hunter Methodology</name>
            <description>The Bug Bounty Hunter Methodology v3 by @jhaddix</description>
            <tasks>
                <task>
                    <name>Map the application</name>
                    <description></description>
                </task>
                <task>
                    <name>Analyse the application</name>
                    <description></description>
                </task>
                <task>
                    <name>Test client-side controls</name>
                    <description></description>
                </task>
                <task>
                    <name>Test access controls</name>
                    <description></description>
                </task>
                <task>
                    <name>Test for logic flaws</name>
                    <description></description>
                </task>
                <task>
                    <name>Test the authentication mechanism</name>
                    <description></description>
                </task>
                <task>
                    <name>Test the session management mechanism</name>
                    <description></description>
                </task>
                <task>
                    <name>Test of web serve vulnerabilities</name>
                    <description></description>
                </task>
                <task>
                    <name>Test for input-based vulnerabilities</name>
                    <description></description>
                </task>
                <task>
                    <name>Perform other checks</name>
                    <description>
                        - Check for DOM-based attacks
                        - Check for Frame injection
                        - Check for local privacy vulnerabilities
                        - Follow up any information leakage
                        - Check for weak SSL ciphers
                    </description>
                </task>
            </tasks>
        </project>
        <project template="true">
            <name>Sayaan Alam's bug hunting list</name>
            <description>Bug hunting - List of tasks created by Sayaan Alam (@ehsayaan). A very systematic way of bug
                hunting. #bugbounty
            </description>
            <tasks>
                <task>
                    <name>Find subdomains</name>
                </task>
                <task>
                    <name>Check CNAME records</name>
                </task>
                <task>
                    <name>Check CNAME records of those subdomains.</name>
                    <description>Check for subdomain takeover. Use wayback URLs on them too.</description>
                </task>
                <task>
                    <name>Do Port Scanning</name>
                    <description>Use MassScan for port scanning</description>
                </task>
                <task>
                    <name>Check CORS misconfiguration</name>
                </task>
                <task>
                    <name>Check for email header injection on reset password function</name>
                </task>
                <task>
                    <name>Check for SMPT and HOST header injection</name>
                </task>
                <task>
                    <name>Check for Iframe</name>
                    <description>Check for Iframe (eg for clickjacking)</description>
                </task>
                <task>
                    <name>Check for improper access control and parameter tampering</name>
                </task>
                <task>
                    <name>Check Burp history for finding endpoint</name>
                </task>
                <task>
                    <name>Use arjun for finding hidden endpoints</name>
                </task>
                <task>
                    <name>Check for CSRF</name>
                </task>
                <task>
                    <name>Check for SSRF parameters</name>
                </task>
                <task>
                    <name>Check for XSS and SSTI</name>
                </task>
                <task>
                    <name>Check Cryptography in reset password token</name>
                </task>
                <task>
                    <name>Check for unicode injection in email parameter</name>
                </task>
                <task>
                    <name>Check for bypassing rate limit</name>
                </task>
                <task>
                    <name>Directory brute force</name>
                </task>
                <task>
                    <name>Check for HTTP request smuggling</name>
                </task>
                <task>
                    <name>Check for open redirect through wayback URLs</name>
                </task>
                <task>
                    <name>Check for Social-Signon bypass</name>
                </task>
                <task>
                    <name>Check for state parameter in social Sign-in</name>
                    <description>Check whether it is possible to cause DoS using multiple cookies injection
                    </description>
                </task>
                <task>
                    <name>File upload CSRF, XSS, SSRF, RCE, LFI, XXE</name>
                </task>
                <task>
                    <name>Check for Buffer overflow</name>
                </task>
            </tasks>
        </project>
        <project template="true">
            <name>Webapp pentesting project by https://hackercombat.com/</name>
            <tasks>
                <task>
                    <name>Contact Form Testing</name>
                    <description>
                        The most preferred entry point for spammers is often a web application’s contact form. Therefore
                        the contact form you have in your web application should be able to identify and prevent such
                        spam attacks. Including CAPTCHA is one of the easiest ways of preventing contact form spamming.
                    </description>
                </task>
                <task>
                    <name>Proxy Server(s) Testing</name>
                    <description>
                        Proxy servers play a huge role in scrutinizing the traffic to your web application and pointing
                        out any malicious activity. Therefore ensure the proxy servers within your network are
                        functioning accurately and efficiently. Tools like Burp Proxy and OWSAP ZAP can go a long way in
                        helping you accomplish this task.
                    </description>
                </task>
                <task>
                    <name>Spam Email Filter Testing</name>
                    <description>
                        Ensure spam email filters are functioning properly. Verify if they are successfully filtering
                        the incoming and outgoing traffic and blocking unsolicited emails. In other words, ensure that
                        email security policies are being enforced properly. Because, as we all know, spam mails are the
                        much-preferred mode of attack for hackers.
                    </description>
                </task>
                <task>
                    <name>Network Firewall Testing</name>
                    <description>
                        Make sure your firewall is preventing undesirable traffic from entering into your web
                        application. Also, ensure the security policies configured using the firewall are being
                        implemented properly. A glitch in your firewall is like sending an invitation to hackers to come
                        and hack your web application.
                    </description>
                </task>
                <task>
                    <name>Security Vulnerability Testing</name>
                    <description>
                        Carry out a thorough security check on various aspects associated with your web application like
                        servers and other such network devices and make a list of the security vulnerabilities they
                        pose. Then find and implement ways to fix them.
                    </description>
                </task>
                <task>
                    <name>Credential Encryption Testing</name>
                    <description>
                        Ensure all usernames and passwords are encrypted and transferred over secure “HTTPS” connection
                        so that these credentials are not compromised by hackers through man-in-the-middle or other such
                        attacks. Because just as your web application needs to be secure, so is the sensitive data being
                        submitted by your clients.
                    </description>
                </task>
                <task>
                    <name>Cookie Testing</name>
                    <description>
                        Cookies store data related to user sessions. Therefore this piece of sensitive information, if
                        it is exposed to the hackers, can result in the security of many users who visit your website or
                        web application being compromised. Therefore ensure your cookie data is not exposed. Or in other
                        words, not available in readable format or as plain text.
                    </description>
                </task>
                <task>
                    <name>Testing For Open Ports</name>
                    <description>
                        Open ports on the web server on which your web application has been hosted also present a good
                        opportunity for hackers to exploit your web application’s security. Therefore carry out this
                        security check and ensure there are no open ports on your web server.
                    </description>
                </task>
                <task>
                    <name>Application Login Page Testing</name>
                    <description>
                        Ensure your web application locks itself up after a specific number of unsuccessful login
                        attempts. This is one of the most basic elements, which, when implemented correctly can go a
                        long way in securing your web application from hackers.
                    </description>
                </task>
                <task>
                    <name>Error Message Testing</name>
                    <description>
                        Ensures all your error messages are generic and do not reveal too much about the problem. If you
                        do so, it’s like announcing to the hacking community, “we have a problem here, you’re welcome to
                        exploit it!” For example: “Invalid Credentials” is fine, but the message should not be specific
                        as “invalid username or password.”
                    </description>
                </task>
                <task>
                    <name>HTTP Method(s) Testing</name>
                    <description>
                        Also review the HTTP methods used by your web application to interact with your clients. Ensure
                        PUT and Delete methods are not enabled, as doing so will allow hackers to easily exploit your
                        web application.
                    </description>
                </task>
                <task>
                    <name>Username and Password Testing</name>
                    <description>
                        Test all the usernames/passwords that are used on your web application. Passwords should be
                        fairly complex and usernames should not be easily guessable. Separate such weak usernames and
                        passwords and alert those users to change them.
                    </description>
                </task>
                <task>
                    <name>File Scanning</name>
                    <description>
                        Ensure all files you upload to your web application or server are scanned before they are
                        uploaded.
                    </description>
                </task>
                <task>
                    <name>SQL Injection Testing</name>
                    <description>
                        SQL injection is one of the most popular methods employed by hackers when it comes to exploiting
                        web applications and websites. Therefore ensure your web application is resistant to various
                        forms of SQL injection.
                    </description>
                </task>
                <task>
                    <name>XSS Testing</name>
                    <description>
                        Also ensure your web application resists cross-site scripting or XSS attacks as well.
                    </description>
                </task>
                <task>
                    <name>Access Permission Testing</name>
                    <description>
                        Check the access permissions of your users and in case your web application provides role-based
                        access, then ensure users are getting access only to those parts of the web application to which
                        they have the right. Nothing more or less.
                    </description>
                </task>
                <task>
                    <name>User Session Testing</name>
                    <description>
                        This is very important. Ensure that user sessions end upon log off. Because if they don’t, that
                        valid session can be easily hijacked by hackers – this process is known as session hijacking –
                        for carrying out malicious activity.
                    </description>
                </task>
                <task>
                    <name>Brute Force Attack Testing</name>
                    <description>
                        Using appropriate testing tools, ensure your web application stays safe against brute force
                        attacks.
                    </description>
                </task>
                <task>
                    <name>DoS (Denial of Service) Attack Testing</name>
                    <description>
                        Also ensure your web application stays safe against DoS (Denial of Service) attacks by using
                        appropriate testing tools.
                    </description>
                </task>
                <task>
                    <name>Directory Browsing</name>
                    <description>
                        Ensure directory browsing is disabled on the web server which hosts your web application.
                        Because if you don’t, you’ll be giving hackers easy access to your restricted files.
                    </description>
                </task>
            </tasks>
        </project>
    </projects>
</reconmap>